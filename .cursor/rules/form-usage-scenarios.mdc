# Form 函数使用场景分类

## 核心原则

Form 函数主要用于**工具函数**，不是业务系统。每个函数应该专注于解决一个具体的问题，具有单一职责、无状态、可配置的特点。

### HTTP 方法约定（重要）
- Form 类型统一使用 POST；避免 GET 绑定遗漏导致参数未解析。
- 若必须 GET 承载参数，务必给请求字段加 `form:"..."` 标签；时间类字段统一用毫秒。

## 使用场景分类

### 1. 数学计算类

#### 基础数学运算
- **斐波那契数列计算**：输入起始位和结束位，输出数列
- **集合运算**：交集、并集、差集、对称差集
- **数学公式计算**：三角函数、对数、幂运算
- **进制转换**：二进制、八进制、十六进制互转
- **单位转换**：长度、重量、温度、货币汇率

#### 实际应用场景
```go
// 斐波那契数列计算
type FibonacciReq struct {
    Start int `json:"start" runner:"name:起始位" widget:"type:number;min:1;max:1000" data:"example:1"`
    End int `json:"end" runner:"name:结束位" widget:"type:number;min:1;max:1000" data:"example:10"`
    Separator string `json:"separator" runner:"name:分隔符" widget:"type:input" data:"example:,"`
}

// 集合运算
type SetOperationReq struct {
    SetA []string `json:"set_a" runner:"name:集合A" widget:"type:input;mode:text_area" data:"example:1,2,3,4,5"`
SetB []string `json:"set_b" runner:"name:集合B" widget:"type:input;mode:text_area" data:"example:4,5,6,7,8"`
    Operation string `json:"operation" runner:"name:运算类型" widget:"type:select;options:交集,并集,差集,对称差集" data:"default_value:交集"`
}
```

### 2. 数据格式转换类

#### 格式转换工具
- **JSON 格式化/压缩**
- **JSON 转 YAML/XML/TOML**
- **YAML 转 JSON/XML**
- **XML 转 JSON/YAML**
- **CSV 转 JSON/Excel/SQL**
- **Excel 转 JSON/CSV/SQL**
- **SQL 转 JSON/Excel**
- **Markdown 转 HTML/PDF**
- **HTML 转 Markdown**

#### 实际应用场景
```go
// Excel 转 JSON 工具
type ExcelToJsonReq struct {
    ExcelFile *files.Files `json:"excel_file" runner:"name:Excel文件" widget:"type:file_upload;accept:.xlsx,.xls" data:"example:data.xlsx"`
    SheetName string `json:"sheet_name" runner:"name:工作表名称" widget:"type:input" data:"example:Sheet1"`
    OutputFormat string `json:"output_format" runner:"name:输出格式" widget:"type:select;options:标准JSON,数组格式,键值对格式" data:"default_value:标准JSON"`
}

// JSON 格式化工具
type JsonFormatReq struct {
    JsonData string `json:"json_data" runner:"name:JSON数据" widget:"type:input;mode:text_area" data:"example:{\"name\":\"test\",\"age\":25}"`
    Action string `json:"action" runner:"name:操作类型" widget:"type:select;options:格式化,压缩,验证" data:"default_value:格式化"`
}
```

### 3. 文本处理类

#### 文本处理工具
- **字符串反转**
- **文本统计**（字符数、单词数、行数）
- **大小写转换**
- **URL 编解码**
- **Base64 编解码**
- **HTML 实体编解码**
- **JSON 转义/去除转义**
- **正则表达式测试**
- **文本去重/排序**

#### 实际应用场景
```go
// 文本统计工具
type TextStatsReq struct {
    Text string `json:"text" runner:"name:文本内容" widget:"type:input;mode:text_area" data:"example:Hello World"`
    StatsType string `json:"stats_type" runner:"name:统计类型" widget:"type:select;options:字符数,单词数,行数,全部" data:"default_value:全部"`
}

// URL 编解码工具
type UrlCodecReq struct {
    Action string `json:"action" runner:"name:操作类型" widget:"type:select;options:编码,解码" data:"example:编码"`
    Text string `json:"text" runner:"name:文本内容" widget:"type:input;mode:text_area" data:"example:https://example.com?name=test&age=25"`
}
```

### 4. 文件处理类

#### 文件处理工具
- **图片格式转换**（JPG/PNG/GIF/WebP）
- **PDF 转换**（PDF 转 Word/Excel/图片）
- **PDF 签名校验**
- **文件压缩/解压**
- **文件传输**（上传+取件码，控制下载次数和到期时间）
- **Excel 转 SQL INSERT 语句**

#### 实际应用场景
```go
// 文件传输工具
type FileUploadReq struct {
    File *files.Files `json:"file" runner:"name:上传文件" widget:"type:file_upload"`
    ExpireDays int `json:"expire_days" runner:"name:有效期(天)" widget:"type:number;min:1;max:30" data:"example:7"`
    MaxDownloads int `json:"max_downloads" runner:"name:最大下载次数" widget:"type:number;min:1;max:1000" data:"example:10"`
}

// 图片格式转换
type ImageConvertReq struct {
    ImageFile *files.Files `json:"image_file" runner:"name:图片文件" widget:"type:file_upload;accept:.jpg,.png,.gif,.webp"`
    TargetFormat string `json:"target_format" runner:"name:目标格式" widget:"type:select;options:JPG,PNG,GIF,WebP" data:"default_value:PNG"`
    Quality int `json:"quality" runner:"name:图片质量" widget:"type:number;min:1;max:100" data:"example:85"`
}
```

### 5. 编码解码类

#### 编码解码工具
- **JWT 编解码**
- **二维码生成/解析**
- **条形码生成/解析**
- **Hash 计算**（MD5/SHA1/SHA256）
- **加密解密**（AES/DES/RSA）

#### 实际应用场景
```go
// JWT 编解码工具
type JwtToolReq struct {
    Action string `json:"action" runner:"name:操作类型" widget:"type:select;options:编码,解码" data:"default_value:编码"`
    Payload string `json:"payload" runner:"name:数据内容" widget:"type:input;mode:text_area" data:"example:{\"user_id\":123,\"exp\":1640995200}"`
Secret string `json:"secret" runner:"name:密钥" widget:"type:input;mode:password" data:"example:mysecret"`
}

// 二维码生成工具
type QrCodeReq struct {
    Content string `json:"content" runner:"name:二维码内容" widget:"type:input;mode:text_area" data:"example:https://example.com"`
    Size int `json:"size" runner:"name:二维码尺寸" widget:"type:number;min:100;max:1000" data:"example:300"`
    ErrorLevel string `json:"error_level" runner:"name:纠错级别" widget:"type:select;options:L,M,Q,H" data:"default_value:M"`
}
```

### 6. 时间日期类

#### 时间日期工具
- **日期时间转换**（各种格式互转）
- **时间戳转换**
- **时区转换**
- **日期计算**（两个日期之间的天数等）

#### 实际应用场景
```go
// 时间戳转换工具
type TimestampConvertReq struct {
    Action string `json:"action" runner:"name:操作类型" widget:"type:select;options:时间戳转日期,日期转时间戳" data:"example:时间戳转日期"`
    Input string `json:"input" runner:"name:输入内容" widget:"type:input" data:"example:1640995200"`
Format string `json:"format" runner:"name:日期格式" widget:"type:input" data:"example:yyyy-MM-dd HH:mm:ss"`
}

// 日期计算工具
type DateCalcReq struct {
    StartDate int64 `json:"start_date" runner:"name:开始日期" widget:"type:datetime;kind:date" data:"example:1640995200000"`
    EndDate int64 `json:"end_date" runner:"name:结束日期" widget:"type:datetime;kind:date" data:"example:1641081600000"`
    CalcType string `json:"calc_type" runner:"name:计算类型" widget:"type:select;options:相差天数,相差小时,相差分钟" data:"default_value:相差天数"`
}
```

### 7. 专业工具类

#### 专业工具
- **基因序列分析**
- **颜色格式转换**（RGB/HEX/HSL）
- **IP 地址工具**（IP 转地理位置、子网计算）
- **网络工具**（Ping、端口扫描）
- **代码格式化**（JSON/XML/HTML/CSS/JavaScript）

#### 实际应用场景
```go
// 颜色格式转换工具
type ColorConvertReq struct {
    InputColor string `json:"input_color" runner:"name:输入颜色" widget:"type:color" data:"example:#FF0000"`
    InputFormat string `json:"input_format" runner:"name:输入格式" widget:"type:select;options:HEX,RGB,HSL" data:"default_value:HEX"`
OutputFormat string `json:"output_format" runner:"name:输出格式" widget:"type:select;options:HEX,RGB,HSL" data:"default_value:RGB"`
}

// IP 地址工具
type IpToolReq struct {
    IpAddress string `json:"ip_address" runner:"name:IP地址" widget:"type:input" data:"example:192.168.1.1"`
    ToolType string `json:"tool_type" runner:"name:工具类型" widget:"type:select;options:地理位置查询,子网计算,Ping测试" data:"default_value:地理位置查询"`
}
```

### 8. 配置管理类

#### 配置管理工具
- **配置文件转换**（JSON/YAML/INI/TOML）
- **环境变量处理**
- **配置文件验证**

#### 实际应用场景
```go
// 配置文件转换工具
type ConfigConvertReq struct {
    InputConfig string `json:"input_config" runner:"name:输入配置" widget:"type:input;mode:text_area"`
    InputFormat string `json:"input_format" runner:"name:输入格式" widget:"type:select;options:JSON,YAML,INI,TOML" data:"default_value:JSON"`
OutputFormat string `json:"output_format" runner:"name:输出格式" widget:"type:select;options:JSON,YAML,INI,TOML" data:"default_value:YAML"`
}
```

## 配置管理示例

### 汇率转换工具（使用配置）
```go
// 汇率转换配置
type ExchangeRateConfig struct {
    ApiKey string `json:"api_key" runner:"name:API密钥" widget:"type:input;mode:password"`
    BaseURL string `json:"base_url" runner:"name:API地址" widget:"type:input" data:"example:https://api.exchangerate-api.com"`
    UpdateInterval int `json:"update_interval" runner:"name:更新间隔(小时)" widget:"type:number;min:1;max:24" data:"example:6"`
}

// 汇率转换请求
type ExchangeRateReq struct {
    FromCurrency string `json:"from_currency" runner:"name:源货币" widget:"type:select;options:USD,CNY,EUR,JPY,GBP" data:"default_value:USD"`
ToCurrency string `json:"to_currency" runner:"name:目标货币" widget:"type:select;options:USD,CNY,EUR,JPY,GBP" data:"default_value:CNY"`
    Amount float64 `json:"amount" runner:"name:金额" widget:"type:number;min:0;precision:2" data:"example:100.00"`
}
```

## 最佳实践要点

### 1. 工具函数特点
- **单一职责**：一个函数只做一件事
- **无状态**：不依赖外部状态
- **可配置**：通过配置管理参数
- **高性能**：处理大量数据时考虑性能

### 2. 错误处理
```go
// 好的错误处理
if err != nil {
    return fmt.Errorf("Excel文件解析失败：%v", err)
}

// 避免的错误处理
if err != nil {
    return fmt.Errorf("失败")
}
```

### 3. 配置管理
```go
// 使用 AutoUpdateConfig 管理工具配置
AutoUpdateConfig: &runner.AutoUpdateConfig{
    ConfigStruct: ToolConfig{
        ApiKey: "your_api_key",
        BaseURL: "https://api.example.com",
    },
    BeforeConfigChange: func(ctx *runner.Context, oldConfig, newConfig interface{}) error {
        // 验证配置有效性
        return nil
    },
},
```

### 4. 文件处理
```go
// 文件上传处理
func ProcessFile(ctx *runner.Context, req *FileProcessReq, resp response.Response) error {
    if req.File == nil || len(req.File.Files) == 0 {
        return fmt.Errorf("请选择要处理的文件")
    }
    
    file := req.File.Files[0]
    // 处理文件...
    
    return resp.Form(&FileProcessResp{
        Result: "处理完成",
    }).Build()
}
```

## 避免的使用场景

### ❌ 不推荐的使用场景
- **用户注册/登录**：这些是业务系统功能，不是工具函数
- **订单管理**：这些是业务系统功能
- **数据统计报表**：这些更适合 table 函数
- **复杂的业务流程**：这些应该用业务系统实现

### ✅ 推荐的使用场景
- **数据格式转换**：JSON、XML、YAML 等格式互转
- **文件处理**：图片转换、PDF 处理、文件传输
- **编码解码**：Base64、URL、JWT 等
- **数学计算**：公式计算、单位转换、集合运算
- **文本处理**：字符串操作、正则表达式、文本统计
- **时间日期**：格式转换、时区转换、日期计算

---

这个文档提供了 form 函数的实际使用场景分类，避免再出现不切实际的用户注册等业务系统示例。
description:
globs:
alwaysApply: false
---
