# function-go SFT训练数据策略

## 🎯 训练目标

将function-go框架的核心知识"刻在模型基因里"，让模型能够：
1. 自动使用正确的框架API
2. 避免常见的错误用法  
3. 生成符合规范的代码结构
4. 理解并应用最佳实践

## 📚 分层训练策略

### 第一层：框架基础API（300条）

**目标**：让模型熟练掌握框架核心API使用

#### 1.1 上下文和响应（50条）
```json
Q: function-go中处理函数的标准签名是什么？
A: func MyHandler(ctx *runner.Context, req *MyReq, resp response.Response) error

Q: 如何获取数据库连接？
A: db := ctx.MustGetOrInitDB() // 返回*gorm.DB对象

Q: 如何返回表单响应？
A: return resp.Form(&MyResp{...}).Build()

Q: 如何返回表格响应？
A: return resp.Table(&rows).AutoPaginated(db, &Model{}, &req.SearchFilterPageReq).Build()
```

#### 1.2 结构体标签系统（100条）
```json
Q: 如何定义一个文本输入框？
A: Name string `json:"name" runner:"name:姓名" widget:"type:input" validate:"required"`

Q: 如何定义下拉选择框？
A: Status string `widget:"type:select;options:正常,禁用,维护" data:"default_value:正常"`

Q: 如何定义搜索功能？
A: 添加search标签：search:"like" (模糊搜索) 或 search:"gte,lte" (区间搜索)
```

#### 1.3 路由注册（50条）
```json
Q: 如何注册form函数？
A: runner.Post("/path", Handler, FormOption)

Q: 如何注册table函数？
A: runner.Get("/path", Handler, TableOption)
```

#### 1.4 自动建表（50条）
```json
Q: 如何配置自动建表？
A: 在BaseConfig中设置：CreateTables: []interface{}{&MyModel{}}

Q: 数据模型需要包含哪些基础字段？
A: ID (主键)、CreatedAt (创建时间)、DeletedAt (软删除)
```

#### 1.5 权限控制（50条）
```json
Q: 如何设置只读字段？
A: 添加permission:"read"标签

Q: 如何设置仅新增时显示的字段？
A: 添加permission:"create"标签
```

### 第二层：错误纠正训练（200条）

**目标**：让模型识别并避免常见错误

#### 2.1 API使用错误（100条）
```json
错误: func Handler(ctx *gin.Context) { ... }
正确: func Handler(ctx *runner.Context, req *MyReq, resp response.Response) error { ... }

错误: ctx.JSON(200, data)  
正确: resp.Form(&MyResp{Data: data}).Build()

错误: db := database.GetDB()
正确: db := ctx.MustGetOrInitDB()
```

#### 2.2 标签使用错误（50条）
```json
错误: widget:"type:input
    placeholder:请输入" (换行)
正确: widget:"type:input" (单行)

错误: validate:"required min=2 max=50" (空格分隔)
正确: validate:"required,min=2,max=50" (逗号分隔)
```

#### 2.3 聚合计算错误（50条）
```json
错误场景: 单选字段使用聚合
错误: "product_id"字段返回"商品数量": "count(价格)" (永远是1)
正确: "product_id"字段返回静态信息："配送方式": "顺丰快递"

正确场景: 多选字段使用聚合
正确: "product_ids"字段返回"商品总价": "sum(价格,*quantity)"
```

### 第三层：完整应用生成（200条）

**目标**：从需求生成完整的符合规范的代码

#### 3.1 简单CRUD系统（100条）
```json
需求: 用户管理系统，包含姓名、邮箱、状态
生成: 完整的table函数 + AutoCrudTable配置

需求: 文件转换工具，上传PDF转换为图片
生成: form函数 + 文件处理逻辑
```

#### 3.2 复杂业务系统（100条）
```json
需求: 学生选课系统，依赖学生表和课程表
生成: 包含OnInputFuzzy回调的关联查询系统

需求: 订单管理，包含商品关联和库存扣减
生成: 包含事务处理的复杂业务逻辑
```

### 第四层：最佳实践训练（100条）

**目标**：让模型掌握框架的最佳实践

#### 4.1 命名规范（30条）
```json
Q: 文件名应该如何命名？
A: 使用snake_case，如：crm_customer.go

Q: 结构体应该如何命名？
A: 使用文件名前缀的PascalCase，如：CrmCustomer

Q: 表名应该如何设置？
A: 使用snake_case单数，如：crm_customer
```

#### 4.2 性能优化（30条）
```json
Q: 如何避免N+1查询？
A: 使用GORM的Preload或批量查询

Q: 如何处理大量数据查询？
A: 使用分页查询和索引优化
```

#### 4.3 错误处理（40条）
```json
Q: form函数如何处理错误？
A: 返回用户友好的错误信息到响应结构体中

Q: table回调如何处理错误？
A: 返回fmt.Errorf("具体错误描述")直接给用户
```

## 🎯 训练数据格式标准

### 基础问答格式
```json
{
  "messages": [
    {
      "role": "user",
      "content": "具体的技术问题"
    },
    {
      "role": "assistant", 
      "content": "详细的解答 + 代码示例 + 关键要点"
    }
  ]
}
```

### 错误纠正格式  
```json
{
  "messages": [
    {
      "role": "user",
      "content": "这段代码有什么问题？\n[错误代码]"
    },
    {
      "role": "assistant",
      "content": "❌ 错误原因分析\n✅ 正确代码示例\n🔑 关键改进点"
    }
  ]
}
```

### 需求到代码格式
```json
{
  "messages": [
    {
      "role": "user", 
      "content": "需求：[具体业务需求描述]"
    },
    {
      "role": "assistant",
      "content": "[完整的符合规范的代码] + [实现要点说明] + [功能特性列表]"
    }
  ]
}
```

## 📊 训练效果验证

### 验证指标
1. **API正确率**：使用正确的framework API > 95%
2. **标签规范性**：结构体标签符合规范 > 90%  
3. **代码可运行性**：生成的代码可直接运行 > 90%
4. **最佳实践遵循**：命名、组织符合规范 > 85%

### 测试用例
```json
测试1: "创建一个图书管理系统" → 验证是否使用TableFunctionOptions + AutoCrudTable
测试2: "文件上传转换工具" → 验证是否正确使用*files.Files类型  
测试3: "学生选课系统" → 验证是否正确处理多表关联和OnInputFuzzy
```

## 🚀 训练实施建议

### 阶段1：基础API训练（1-2周）
- 重点训练框架核心API使用
- 大量错误纠正样本
- 确保基础概念牢固

### 阶段2：复杂应用训练（2-3周） 
- 完整系统生成训练
- 业务逻辑处理训练
- 最佳实践融合训练

### 阶段3：效果验证和调优（1周）
- 实际场景测试
- 错误case收集和补强
- 训练数据迭代优化

通过这套分层训练策略，可以让模型深度掌握function-go框架，生成高质量、符合规范的代码！